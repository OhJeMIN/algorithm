import java.util.*;

class Solution {
    public int[] dx = {1, 0, -1, 0};
    public int[] dy = {0, 1, 0, -1};
    public boolean[][] visited;

    public int solution(String[] board) {
        int answer = -1;
        int rX = 0, rY = 0;
        visited = new boolean[board.length][board[0].length()];
        
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length(); j++) {
                if (board[i].charAt(j) == 'R') {
                    rX = i;
                    rY = j;
                }
            }
        }

        answer = BFS(board, rX, rY);
        
        return answer;
    }

    public int BFS(String[] board, int startX, int startY) {
        Queue<Node> q = new LinkedList<>();
        q.add(new Node(startX, startY, 0));
        visited[startX][startY] = true;
        
        while (!q.isEmpty()) {
            Node node = q.poll();
            int x = node.x;
            int y = node.y;
            int move = node.move;
            
            if (board[x].charAt(y) == 'G') {
                return move;
            }
            
            for (int k = 0; k < 4; k++) {
                int curX = x;
                int curY = y;
                
                while (true) {
                    int nextX = curX + dx[k];
                    int nextY = curY + dy[k];
                    
                    if (nextX < 0 || nextY < 0 || nextX >= board.length || nextY >= board[0].length()) break;
                    if (board[nextX].charAt(nextY) == 'D') break;
                    
                    curX = nextX;
                    curY = nextY;
                }
                
                if (!visited[curX][curY]) {
                    visited[curX][curY] = true;
                    q.add(new Node(curX, curY, move + 1));
                }
            }
        }

        return -1;
    }

    public class Node {
        private int x;
        private int y;
        private int move;

        public Node(int x, int y, int move) {
            this.x = x;
            this.y = y;
            this.move = move;
        }
    }
}
