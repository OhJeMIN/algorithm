import java.util.*;
import java.util.stream.*;
import java.time.*;
import java.time.format.DateTimeFormatter;
class Solution {
    public String[] solution(String[][] plans) {
        String[] answer = {};
        ArrayList<String> answerList = new ArrayList<>();
        Queue<Work> q = new LinkedList<>();
        Stack<Work> st = new Stack<>();
        
        Arrays.sort(plans, new Comparator<String[]>() {
            @Override
            public int compare(String[] a, String[] b) {
                return a[1].compareTo(b[1]);
            }
        });
        
        for(String[] entry : plans){
            q.add(new Work(entry[0],entry[1],Integer.parseInt(entry[2])));
        }
        for(int i=0;i<plans.length;i++){
            Work cWork = q.poll();
            if(q.isEmpty()) {
                answerList.add(cWork.name);
                break;
            }
            else{
                Work nWork = q.peek();
                int play = calculateTimeDifference(nWork.time, cWork.time);
                int remainingPlayTime  = cWork.playTime - play;
                if(remainingPlayTime  > 0) {
                    cWork.playTime = remainingPlayTime;
                    st.add(cWork);
                }
                else {
                    answerList.add(cWork.name);
                    int elapsedTime = play - cWork.playTime;                    
                    while(!st.isEmpty() && elapsedTime > 0) {
                        Work lastWork = st.pop();
                        if(lastWork.playTime <= elapsedTime) {
                            answerList.add(lastWork.name);
                            elapsedTime -= lastWork.playTime;
                        } else {
                            lastWork.playTime -= elapsedTime;
                            st.push(lastWork);
                            elapsedTime = 0;
                        }
                    }
                }
            }            
        }
        while (!st.isEmpty()) {
            answerList.add(st.pop().name);
        }
        return answerList.stream().toArray(String[]::new);
    }
    
    public class Work {
        private String name;
        private String time;
        private int playTime;
        
        public Work(String name, String time, int playTime) {
            this.name = name;
            this.time = time;
            this.playTime = playTime;
        }
        
    }
    
    public static int calculateTimeDifference(String time1, String time2) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
        LocalTime localTime1 = LocalTime.parse(time1, formatter);
        LocalTime localTime2 = LocalTime.parse(time2, formatter);

        Duration duration = Duration.between(localTime1, localTime2);
        return Math.abs((int) duration.toMinutes());
    } 
}
